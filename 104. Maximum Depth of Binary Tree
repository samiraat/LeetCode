from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        #Solution : 35 ms - 17.66 mb
        # if root == None:
        #     return 0
        # else:
        #     return 1 + max (self.maxDepth(root.left) , self.maxDepth(root.right))
        #solution 2 36 ms - 17.50 mb
        if not root:
            return 0
        depth = 0
        q = deque([root ])
        while q:
            for i in range(len(q)):
                n  = q.popleft()
                if n.left:
                    q.append(n.left)
                if n.right:
                    q.append(n.right)

            depth += 1
        return depth
        

